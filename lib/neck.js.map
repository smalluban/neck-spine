{"version":3,"file":"lib/neck.js","sources":["src/neck.coffee","src/runners/bind.coffee","src/runners/class.coffee","src/runners/element.coffee","src/runners/event.coffee","src/runners/helper.coffee","src/runners/hide.coffee","src/runners/list.coffee","src/runners/route.coffee","src/runners/show.coffee","src/runners/value.coffee"],"names":[],"mappings":"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","sourcesContent":["# Initialize Neck global object\nwindow.Neck = Neck = {}\n\nNeck.Scope = class Scope extends Spine.Module\n  @include Spine.Events\n\n  constructor: (options)->\n    throw \"Context required\" unless options.context\n\n    for key, value of options\n      @addHiddenProperty key, value\n\n    for property in [\n      [\"_resolvers\", {}]\n      [\"_dirties\", []]\n      [\"_childs\", []]\n      [\"_callbacks\", {}]\n      [\"listeningTo\", []]\n      [\"listeningToOnce\", []]\n    ]\n      @addHiddenProperty.apply @, property\n\n  child: (options)->\n    @_childs.push child = Object.create(@)\n\n    for key, value of options\n      child.addHiddenProperty key, value\n\n    for property in [\n      [\"parent\", @]\n      [\"_resolvers\", {}]\n      [\"_dirties\", []]\n      [\"_childs\", []]\n      [\"_callbacks\", {}]\n      [\"listeningTo\", []]\n      [\"listeningToOnce\", []]\n    ]\n      child.addHiddenProperty.apply child, property\n\n    child\n\n  ### PROPERTIES ###\n\n  _stringForEval: (string, scope = 'scope', context = 'context')->\n    string = string.trim()\n    texts = string.match /\\'[^\\']+\\'/g\n    reservedKeywords = new RegExp \"\"\"\n      (^|\\\\ )#{scope}\\\\.(do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|\n      void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|\n        return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|\n        function|arguments|interface|protected|implements|instanceof|undefined|window)\"\"\", \"g\"\n    contextRegex = new RegExp \"\\\\@#{scope}\\\\.([a-zA-Z$_][^\\ ]+)\", \"g\"\n\n    string.replace(/\\'[^\\']+\\'/g, (text)-> \"###\")\n      .replace(/([a-zA-Z$_][^\\ \\(\\)\\{\\}]*)/g, \"#{scope}.\\$1\")\n      .replace(reservedKeywords, (text)-> text.replace('scope.', ''))\n      .replace(contextRegex, \"#{context}.\\$1\")\n      .replace(/###/g, ()-> texts.shift())\n\n  _getPropertiesFromString: (string)->\n    string = string.replace /\\'[^\\']+\\'/g, (text)-> \"###\"\n    result = []\n\n    for item in string.match /scope\\.([a-zA-Z$_][^\\ \\(\\)\\{\\}\\;]*)/g\n      if result.indexOf(property = item.replace('scope.','')) is -1\n        result.push property\n\n    result\n\n  addHiddenProperty: (key, value)->\n    Object.defineProperty @, key,\n      value: value\n      enumerable: false\n      configurable: false\n\n  addProperty: (name, string, scope = @parent, context = @context)->\n    # Match string, ex: \"'Text'\"\n    if string.match /^\\'.+\\'$/\n      @[name] = string.replace(/^\\'/,'').replace(/\\'$/,'')\n    # Match Number, ex: 12.34\n    else if string.match /^[0-9]+((\\.|\\,)?[0-9]+)*$/\n      @[name] = Number string.replace(/\\,/g, '.')\n    # Anything else we need eval\n    else\n      string = @_stringForEval string\n      # For check we need string without texts\n      checkString = string.replace /\\'[^\\']+\\'/g, (text, index)-> \"###\"\n      resolvers = []\n\n      unless checkString.match /[-+=\\(\\)\\{\\}\\:]+/\n        model = string.split('.')\n        resolvers.push model[1]\n\n        property = model.pop()\n        model = eval model.join('.')\n\n        Object.defineProperty @, name, \n          get: -> eval string\n          set: (val)-> model[property] = val\n      else\n        if checkString.match /\\:/\n          string = \"(\" + string + \")\"\n\n        Object.defineProperty @, name, \n          get: -> \n            eval string\n\n        unless checkString.match /\\(/\n          resolvers = @_getPropertiesFromString checkString\n        else\n          resolvers.push '?'\n\n      @_resolvers[name] = []\n\n      # set Resolver\n      for resolver in resolvers\n        if resolver is '?'\n          @_resolvers[name].push { scope: scope._root(), property: '?' }\n        else if parentResolver = scope._resolvers[resolver]\n          for resolve in parentResolver\n            @_resolvers[name].push resolve\n        else\n          if scope.hasOwnProperty(resolver) or !scope.parent\n            @_resolvers[name].push { scope: scope, property: resolver }\n\n      undefined\n\n  #### WATCHERS ###\n\n  _root: ->\n    @parent?._root() or @\n\n  watch: (args...)->\n    callback = args.pop()\n    properties = args\n\n    if properties.length\n      for property in properties\n        if @_resolvers[property] \n          for resolver in @_resolvers[property] \n            @listenTo resolver.scope, \"refresh:#{resolver.property}\", callback\n        else if @hasOwnProperty(property) or !@parent\n          @bind \"refresh:#{property}\", callback\n        else\n          scope = @\n          while parentScope = scope.parent\n            if parentScope._resolvers[property]\n              for resolver in parentScope._resolvers[property] \n                @listenTo resolver.scope, \"refresh:#{resolver.property}\", callback\n              break\n    else\n      @listenTo @_root(), \"refresh:?\", callback\n\n    # Initial call\n    callback.call @\n\n  apply: (dirties...)->\n    root = @_root()\n    root._applies or= 0\n    root._applies += 1\n\n    for dirty in dirties     \n      if @_resolvers[dirty]\n        for resolver in @_resolvers[dirty]\n          resolver.scope.trigger \"refresh:#{resolver.property}\"\n      else\n        @.trigger \"refresh:#{dirty}\"\n\n    unless --root._applies\n      root.trigger 'refresh:?'\n\n  clearSelf: ->\n    @stopListening()\n\n  clearChilds: ->\n    for child in @_childs\n      child.clearChilds()\n      child.clearSelf()\n    undefined\n\n  release: ->\n    @unbind()\n\n    @clearChilds()\n    @clearSelf()\n\nNeck.Controller = class Controller extends Spine.Controller\n\n  # Global setup\n  @viewsPath: 'views'\n  @controllersPath: 'controllers'\n  @helpersPath: 'helpers'\n\n  # Runners list\n  @runners: []\n\n  scope: true\n  inheritScope: true\n\n  constructor: ->\n    super\n\n    unless @rootScope\n      @scope = new Scope context: @\n    else \n      if @scope\n        if @inheritScope\n          childScope = @rootScope.child()\n        else\n          childScope = new Scope context: @\n        if typeof @scope is 'object'\n          for key, value of @scope\n            if string = @el[0].dataset[key]\n              switch @scope[key]\n                when '@' then childScope.addProperty key, \"'#{string}'\", @rootScope\n                when '=' then childScope.addProperty key, string, @rootScope\n            else \n              childScope[key] = @scope[key]\n        else if @scope is '@'\n          for key, value of @el[0].dataset\n            childScope.addProperty key, \"'#{value}'\", @rootScope\n        else if @scope is '='\n          for key, value of @el[0].dataset\n            childScope.addProperty key, value, @rootScope\n\n        @scope = childScope\n\n  append: (controller)->\n    @yield or= @el.find('[ui-yield]')[0] or @el[0]\n    $(@yield).append controller.el or controller\n\n  parse: (node = @el[0])->\n    el = null\n\n    @parse child for child in node.childNodes\n\n    if node.attributes\n      for attribute in node.attributes\n        continue unless attribute.nodeName?.substr(0, 3) is \"ui-\"\n        name = attribute.nodeName.substr(3)\n\n        if Neck.Controller.runners[name]\n          el or= $(node)\n          runner = new Neck.Controller.runners[name](el: el, rootScope: @scope, runAttr: attribute.value)\n      \n    undefined\n\n  render: ->\n    if @view\n      # Clear childs scopes\n      @scope.clearChilds()\n\n      if typeof @view is 'function'\n        @view.call @\n      else\n        @el.html (require(\"#{Neck.Controller.viewsPath}/#{@view}\"))(@scope) \n        \n      @parse()\n\n  release: ->\n    super\n\n    unless @scope is @rootScope\n      @scope.release()\n\n    @scope = undefined\n\n\nNeck.Screen = class Screen extends Neck.Controller\n  className: 'screen'\n\n  # For default screen clear scope of parent screen \n  # and only can inherit values gives to ui-route runner\n  inheritScope: false\n\n  # Type of screen (normal/popup)\n  # Popups always are placed after leaf and not deactive \n  # this leaf - their parent\n  popup: false \n  \n  # loading same path trigger refresh controller\n  # Can be useful when new params goes to the same view\n  reloadSelf: false \n\n  constructor: ->\n    super\n\n    throw \"No path defined\" unless @path\n\n    # Add to el path classes\n    @el.addClass @path.replace /\\//gi, ' '\n\n    # Creating view path from path\n    @view = @path unless @view\n\n  ### RENDERING / VIEW ###\n\n  _inDOM: -> \n    @el[0].parentNode?\n\n  render: ->\n    super\n\n    # Try to find yield\n    @yield = @el.find('[ui-yield]')[0]\n\n    # Connecting view parent element \n    # should be done only once\n    unless @_inDOM()\n      @parent?.append @\n\n  append: (controller)->\n    if @yield\n      $(@yield).append controller.el or controller\n    else\n      @parent.append controller\n\n  activate: ->\n    # Try to release child\n    @child?.release()\n    @child = null\n\n    # Deactivate parent\n    @parent?.deactivate() unless @popup\n    @parent?.child = @\n\n    # Set DOM changes\n    @el.addClass 'active'\n    @el.css 'zIndex', @zIndex = @parent?.zIndex + 1 or 1\n\n    @trigger 'activate'\n\n    # Render controller view\n    @render() unless @_inDOM()\n\n    @\n\n  deactivate: ->\n    @el.removeClass 'active' unless @yield\n    @trigger 'deactivate'\n\n  ### ROUTING ###\n\n  _leaf: ->\n    @child?._leaf() or @\n\n  _childWithPath: (path)->\n    if @child\n      if @child.path is path\n        @child\n      else\n        @child._childWithPath path\n    else\n      false\n\n  route: (path, options = {}, back = false)->\n    controller = @root._childWithPath path\n\n    # New controller instance is created if there is\n    # no controller in scope or if it is direct child\n    # and it has 'reloadSelf' property turn on (true)\n    if (controller is false) or (controller is @child and controller.reloadSelf)\n      @child.release() if controller is @child\n\n      controller = require(\"#{Neck.Controller.controllersPath}/#{path}\")\n\n      # Popup always are put on top of controllers scope\n      parent = if controller::popup then @_leaf() else @\n\n      # If controller are in back, @parent should be parent\n      # Back means that we want to go up in scope instead of going down\n      if back and @parent\n        options.parent = @parent\n        options.rootScope = @parent.scope\n        @release()\n      else\n        options.parent = parent\n        options.rootScope = @scope\n\n      options.path = path\n      options.root = @root\n\n      # Set child of parent controller\n      controller = new controller(options)\n\n    # Finally activate controller\n    controller.activate()\n\n    # Send route event to app controller\n    @root.trigger 'route', controller\n\n  ### SINGLETON ###\n\n  singleton: -> \n    unless @constructor._instance\n      @constructor._instance = @\n      return false\n    else\n      return @constructor._instance\n\n  _isSingleton: ->\n    @constructor._instance isnt undefined\n\n  ### RELEASE ###\n\n  release: ->\n    # Firstly release child screens \n    @child?.release()\n    @child = undefined\n\n    unless @_isSingleton()\n      super\n    else\n      @el.css 'zIndex', @zIndex = 0\n      @deactivate()\n\n\nNeck.App = class App extends Neck.Screen\n\n  # Path is required by Screen controller and is translate \n  # to view property so for defualt view has path 'app'\n  path: 'app' \n\n  ### OPTIONS ###\n\n  hashRoute: false\n  historyApi: false\n\n  constructor: ->\n    super\n\n    # App Controller is root of screens scope\n    @root = @\n\n    # History API can be used when Browser support it\n    @historyApi = @historyApi and window.history\n\n    # Push route to hash\n    @on 'route', @_pushRoute if @hashRoute\n\n    # This call should be triggered in your app controller\n    # by @trigger 'run' when your calls and setup is done\n    @one 'run', ->\n      @render()\n      @_evaluateRoute() if @hashRoute\n\n  _pushRoute: ->\n    hash = []\n\n    screen = @child\n    while screen \n      if (screen.child and screen.yield) or (!screen.child)\n        params = []\n        for param, value of screen.params\n          if typeof value is 'string'\n            params.push \"#{param}='#{value}'\"\n          else\n            params.push \"#{param}=#{value}\"\n        hash.push if params.length then screen.path + \"[#{params.join('&')}]\" else screen.path\n      screen = screen.child\n    if @historyApi\n      window.history.replaceState null, '', hash.join(':')\n    else\n      window.location.hash = \"!/#{ hash.join(':') }\"\n    \n  _evaluateRoute: ->\n    # get path\n    if @historyApi and window.history\n      path = window.location.pathname\n      path = '/' + path if path.substr(0,1) isnt '/'\n    else\n      path = window.location.hash\n      path = path.replace(/^#(!\\/)?/, '')\n\n    if path = path.match /[^\\:]+((\\'[^\\']*\\')?[^\\:]+)+/g\n      screen = @\n      for routePath, i in path\n        routePath = routePath.replace /^\\+/, -> screen.path + '/'\n        options = params: {}\n        routePath = routePath.match /[^\\[\\]]+/g\n\n        for param in (routePath[1] or '').match(/[a-zA-Z$_][a-zA-Z$_0-9\\-]+\\=(\\'[^\\']*\\'|[A-Za-z]+|[0-9]+((\\.|\\,)?[0-9]+)*)/g) or []\n          param = param.match /^([a-zA-Z$_][a-zA-Z$_0-9\\-]+)(?:\\=)(.+)/\n          options.params[param[1]] = eval param[2]\n\n        try\n          screen = screen.route(routePath[0], options)\n        catch e\n          # Clear hash\n          window.location.hash = \"!/\"\n          return @root.activate()","Neck.Controller.runners['bind'] = class BindRunner extends Neck.Controller\n\n  events: \n    \"keyup\": \"update\"\n    \"change\": \"update\"\n    \"search\": \"update\"\n\n  constructor: ->\n    super\n\n    @scope.addProperty 'bind', @runAttr\n\n    # Set default value\n    @el.val(@scope.bind) if @scope.bind\n\n    @scope.watch 'bind', =>\n      @el.val(if @scope.bind then @scope.bind else '') \n\n  calculateValue: (value)->\n    if value.match /^[0-9]+((\\.|\\,)?[0-9]+)*$/\n      Number value\n    else\n      value\n\n  update: ->\n    @scope.bind = @calculateValue(@el.val()) or undefined\n    @scope.apply 'bind'","Neck.Controller.runners['class'] = class ClassRunner extends Neck.Controller\n  \n  constructor: ->\n    super\n\n    @scope.addProperty 'class', @runAttr\n    throw \"Class attribute has to be object\" unless typeof @scope.class is 'object'\n\n    @scope.watch 'class', =>\n      for key, value of @scope.class\n        if value\n          @el.addClass key\n        else\n          @el.removeClass key\n      undefined\n\n","Neck.Controller.runners['element'] = class ElementRunner\n  \n  constructor: (options)->\n    options.rootScope[\"#{options.runAttr}\"] = options.el\n","### LIST OF EVENTS TO TRIGGER ###\n\nEventList = [\n  \"click\", \"dblclick\"\n  \"mouseenter\", \"mouseleave\", \"mouseout\"\n  \"mouseover\", \"mousedown\", \"mouseup\"\n  \"drag\", \"dragstart\", \"dragenter\", \"dragleave\", \"dragover\", \"dragend\", \"drop\"\n  \"load\"\n  \"focus\", \"focusin\", \"focusout\", \"select\", \"blur\"\n  \"submit\"\n  \"scroll\"\n  \"touchstart\", \"touchend\", \"touchmove\", \"touchenter\", \"touchleave\", \"touchcancel\"\n]\n\nclass EventRunner extends Neck.Controller\n\n  constructor: ->\n    super\n\n    @scope.addProperty 'method', @runAttr\n    if typeof(@scope.method) is 'function'\n      @scope.method.call @scope.context, @scope, @e\n    else\n      @scope.apply 'method'\n\n    @scope.release()\n\nclass Event\n\n  constructor: (options)->\n    options.el.on @eventType, (e)=>\n      e.preventDefault()\n      options.e = e\n      new EventRunner options\n\n### INIT ALL EVENTS ###\n\nfor ev in EventList\n  eventRunner = class ER extends Event\n  eventRunner::eventType = ev\n  Neck.Controller.runners[\"event-#{ev}\"] = eventRunner\n","Neck.Controller.runners['helper'] = class HelperRunner\n\n  constructor: (options)->\n    new (require(\"#{Neck.Globals.helpersPath}/\" + options.runAttr))(\n      context: options.context\n      el: options.el\n      rootScope: options.rootScope\n    )","Neck.Controller.runners['hide'] = class HideRunner extends Neck.Controller\n\n  constructor: ->\n    super\n\n    @scope.addProperty 'hide', @runAttr\n\n    @scope.watch 'hide', =>\n      if @scope.hide\n        @el.hide()\n      else\n        @el.show()\n\n","Neck.Controller.runners['list'] = class ListRunner extends Neck.Controller\n\n  scope:\n    items: '='\n    filter: '='\n    view: '='\n    \n  constructor: ->\n    super\n\n    throw 'No view defined' unless @scope.view\n\n    @scope.watch 'items', =>\n      if @scope.items\n        if @controllers\n          controller.release() for controller in @controllers\n\n        @controllers = for item in @scope.items\n          # Create item controller\n          itemController = new ListItem context: @context, rootScope: @scope, item: item, itemName: @runAttr\n          @append itemController\n          itemController\n        undefined\n\n    timeout = null\n\n    @scope.watch 'filter', =>\n      clearTimeout timeout\n      timeout = setTimeout =>\n        if @controllers\n          controller.checkFilter() for controller in @controllers\n        undefined\n      , 10\n\nclass ListItem extends Neck.Controller\n\n  text: null\n  view: -> @el = $(require(\"#{Neck.Controller.viewsPath}/#{@scope.view}\")(@scope))\n  visible: true\n\n  constructor: ->\n    super\n  \n    @scope[@itemName] = @item\n    @render()\n    @text = @el.text()\n\n    # Listen to update event on spine models\n    if @item instanceof Spine.Model\n      @listenTo @item, 'update', @render\n      @listenTo @item, 'destroy', => @release()\n\n    @checkFilter()\n\n  checkFilter: ->\n    if !@scope.filter and !@visible\n      @el.show()\n      @visible = true\n    else\n      if @text.match(@scope.filter)\n        unless @visible\n          @el.show()\n          @visible = true\n      else\n        if @visible\n          @el.hide()\n          @visible = false\n\n","class RouteRunner extends Neck.Controller\n\n  scope: '='\n\n  constructor: ->\n    super\n\n    options = {}\n    options.params = {}\n\n    for own key, value of @scope\n      options.params[key] = value\n\n    @scope.context.route @runAttr, options, @back\n    @scope.release()\n\nNeck.Controller.runners['route'] = class Router \n\n  constructor: (options)->\n    options.el.on 'click', (e)=>\n      e.preventDefault()\n      new RouteRunner options\n\nNeck.Controller.runners['route-back'] = class Router \n\n  constructor: (options)->\n    options.el.on 'click', (e)=>\n      e.preventDefault()\n      options.back = true\n      new RouteRunner options\n\n  ","Neck.Controller.runners['show'] = class ShowRunner extends Neck.Controller\n\n  constructor: ->\n    super\n\n    @scope.addProperty 'show', @runAttr \n\n    @scope.watch 'show', =>\n      if @scope.show\n        @el.show()\n      else\n        @el.hide()\n\n","Neck.Controller.runners['value'] = class ValueRunner extends Neck.Controller\n\n  constructor: ->\n    super\n\n    @scope.addProperty 'value', @runAttr \n\n    @scope.watch 'value', =>\n      @el.html @scope.value or ''\n\n"]}